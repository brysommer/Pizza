import { bot, driversBot } from "./app.js";
import { keyboards, phrases } from './language_ua.js';
import { findUserByChatId } from './models/user.js';
import { logger } from "./logger/index.js";
import { findLocalOrderById, updateDriverLocalOrderById } from "./models/localOrders.js";
import { findDriverByChatId, findDriversChatId } from "./models/drivers.js";
import { dataBot } from "./values.js";

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));


const getRide = async () => {
    const handleGet = async (chatId, textCommand) => {
        try {
            const localOrder = await findLocalOrderById(textCommand[1]);
            const driver = await findDriverByChatId(chatId);
            await updateDriverLocalOrderById(textCommand[1], driver.id);

            await bot.sendMessage(localOrder.client, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${localOrder.id} –ø—Ä–∏–π–Ω—è—Ç–æ ` );
            await bot.sendMessage(localOrder.client, `–û—á—ñ–∫—É–π—Ç–µ –∞–≤—Ç–æ ${driver.registration_number}\n–ù–æ–º–µ—Ä –∫—É—Ä'—î—Ä–∞: ${driver.phone}`);

            if (textCommand[2]) {
                await bot.sendMessage(localOrder.client, `–ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: ${textCommand[2]}`);
            }

            await bot.sendMessage(dataBot.driversChannel, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${textCommand[1]} –∑–Ω—è—Ç–æ`);

            const drivers = await findDriversChatId();

            for (const driverId of drivers) {
                try {
                    await driversBot.sendMessage(driverId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${textCommand[1]} –∑–Ω—è—Ç–æ`);
                } catch (error) {
                    console.warn(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–æ–¥—ñ—î–≤—ñ –∑ chatId ${driverId}:`, error?.message || error);
                    // –ú–æ–∂–µ—à —â–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É, —â–æ–± –≤—ñ–¥–º—ñ—á–∞—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤ —É –±–∞–∑—ñ
                }
            }

            await driversBot.sendMessage(
                chatId,
                `*–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${textCommand[1]}*\n` +
                `üìç *–ê–¥—Ä–µ—Å–∞ –∫—É–¥–∏:* ${localOrder.pickup_location}\n` +  
                `üìç *–ê–¥—Ä–µ—Å–∞ –∑–≤—ñ–¥–∫–∏:* ${localOrder.price}\n` +
                `üí≥ *–û–ø–ª–∞—Ç–∞:* ${localOrder?.direction_location} –≥—Ä–Ω ‚úÖ\n` +
                `üìû ${localOrder?.phone}`,
                { parse_mode: "Markdown" }
            );

        } catch (error) {
            logger.warn(`Something went wrong when driver ${chatId} book the ride ${textCommand[1]}. Error: ${error}`);
            bot.sendMessage(chatId, phrases.localBookingWrong);
        }
    };

    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.on('message', async (message) => {
        const chatId = message.chat.id;
        const text = message.text;
        const textCommand = text ? text.split("@") : undefined;

        if (textCommand?.[0] === 'get') {
            await handleGet(chatId, textCommand);
        }
    });

    // –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–∫–∏
    driversBot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.from.id;
        const data = callbackQuery.data; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "get@123@15:00"
        const textCommand = data ? data.split("@") : undefined;

        if (textCommand?.[0] === 'get') {
            await handleGet(chatId, textCommand);

            // –ó–∞–∫—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
            await driversBot.answerCallbackQuery(callbackQuery.id);
        }
    });
};


export default getRide;